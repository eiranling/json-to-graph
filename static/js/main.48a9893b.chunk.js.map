{"version":3,"sources":["components/DataForm.js","components/config/graph.js","util/utility.js","components/JSONGraph.js","components/ErrorBar.js","components/App.js","serviceWorker.js","index.js"],"names":["DataForm","react_default","a","createElement","className","rel","href","integrity","crossOrigin","Form_default","Group","controlId","Label","Control","as","rows","onChange","this","props","onJsonChange","React","Component","graph_config","height","window","innerHeight","width","innerWidth","automaticRearrangeAfterDropNode","collapsible","directed","focusAnimationDuration","focusZoom","highlightDegree","highlightOpacity","linkHighlightBehavior","maxZoom","minZoom","nodeHighlightBehavior","panAndZoom","staticGraph","d3","alphaTarget","gravity","linkLength","linkStrength","node","color","fontColor","fontSize","fontWeight","highlightColor","highlightFontSize","highlightFontWeight","highlightStrokeColor","highlightStrokeWidth","labelProperty","mouseCursor","opacity","renderLabel","size","strokeColor","strokeWidth","svg","symbolType","link","semanticStrokeWidth","isObject","constructor","Object","JSONGraph","source","target","options","label","console","log","weight","from","connections","edges","connection","hasOwnProperty","generateLinkWithOptions","push","forEach","item","Array","generateConnectionsFromArray","generateConnectionsFromObject","items","graph","nodes","links","concat","toConsumableArray","generateConnectedItems","map","id","includes","filter","value","index","self","slice","length","data","convertToGraph","graph_json","lib","ref","config","renderGraph","ErrorBar","show","message","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","setState","json","JSON","parse","json_valid","error","state","ErrorBar_ErrorBar","DataForm_DataForm","JSONGraph_JSONGraph","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48a9893b.chunk.js","sourcesContent":["import React from 'react'\nimport Form from \"react-bootstrap/Form\";\nimport '../css/Form.css'\nimport '../css/common.css'\n\nexport default class DataForm extends React.Component {\n\n\n    render() {\n        return (\n            <div className=\"left quarter full form shadowed standard\">\n                <link rel = \"stylesheet\"\n                    href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                    integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                    crossOrigin = \"anonymous\"/>\n                    <div className=\"fill-width\">\n                        <Form>\n                            <Form.Group controlId=\"dataForm.JsonDataArea\" >\n                                <Form.Label>Enter JSON data here</Form.Label>\n                                <Form.Control as=\"textarea\" rows=\"30\" onChange={this.props.onJsonChange}/>\n                            </Form.Group>\n                        </Form>\n                    </div>\n            </div>\n        )\n    }\n}\n","const graph_config = {\n    \"height\": window.innerHeight,\n    \"width\": window.innerWidth*0.70,\n    \"automaticRearrangeAfterDropNode\": false,\n    \"collapsible\": false,\n    \"directed\": false,\n    \"focusAnimationDuration\": 0.75,\n    \"focusZoom\": 1,\n    \"highlightDegree\": 1,\n    \"highlightOpacity\": 1,\n    \"linkHighlightBehavior\": false,\n    \"maxZoom\": 8,\n    \"minZoom\": 0.1,\n    \"nodeHighlightBehavior\": false,\n    \"panAndZoom\": false,\n    \"staticGraph\": false,\n    \"d3\": {\n        \"alphaTarget\": 0.05,\n        \"gravity\": -100,\n        \"linkLength\": 100,\n        \"linkStrength\": 1\n    },\n    \"node\": {\n        \"color\": \"#d3d3d3\",\n        \"fontColor\": \"black\",\n        \"fontSize\": 8,\n        \"fontWeight\": \"normal\",\n        \"highlightColor\": \"SAME\",\n        \"highlightFontSize\": 8,\n        \"highlightFontWeight\": \"normal\",\n        \"highlightStrokeColor\": \"SAME\",\n        \"highlightStrokeWidth\": \"SAME\",\n        \"labelProperty\": \"id\",\n        \"mouseCursor\": \"pointer\",\n        \"opacity\": 1,\n        \"renderLabel\": true,\n        \"size\": 200,\n        \"strokeColor\": \"none\",\n        \"strokeWidth\": 1.5,\n        \"svg\": \"\",\n        \"symbolType\": \"circle\"\n    },\n    \"link\": {\n        \"color\": \"#d3d3d3\",\n        \"fontColor\": \"black\",\n        \"fontSize\": 8,\n        \"fontWeight\": \"normal\",\n        \"highlightColor\": \"#d3d3d3\",\n        \"highlightFontSize\": 8,\n        \"highlightFontWeight\": \"normal\",\n        \"labelProperty\": \"label\",\n        \"mouseCursor\": \"pointer\",\n        \"opacity\": 1,\n        \"renderLabel\": true,\n        \"semanticStrokeWidth\": false,\n        \"strokeWidth\": 1.5\n    }\n};\n\n\nexport default graph_config;","export const isArray = function(a) {\n    return (!!a) && (a.constructor === Array);\n};\n\nexport const isObject = function(a) {\n    return (!!a) && (a.constructor === Object);\n};\n","import React from 'react'\nimport {Graph} from 'react-d3-graph'\nimport '../css/common.css'\nimport '../css/graph.css'\nimport graph_config from './config/graph'\nimport {isArray, isObject} from \"../util/utility\";\n\n\nexport default class JSONGraph extends React.Component {\n\n    generateLinkWithOptions(source, target, options) {\n        let link = {source: source, target: target};\n        link.label = \"label\" in options ? options.label : \"\";\n\n        if (\"weight\" in options) {\n            console.log(\"detected weight\");\n            link.strokeWidth = options.weight;\n        }\n\n        console.log(link);\n\n        return link;\n    }\n\n    generateConnectionsFromObject(from, connections) {\n        let edges = [];\n        for (let connection in connections) {\n            if (connections.hasOwnProperty(connection)) {\n                let link = {source: from, target: connection};\n                console.log(connections[connection]);\n                if (isObject(connections[connection])) {\n                    link = this.generateLinkWithOptions(from, connection, connections[connection]);\n                }\n                edges.push(link);\n            }\n        }\n        return edges\n    }\n\n    generateConnectionsFromArray(from, connections) {\n        let edges = [];\n        connections.forEach((item) => edges.push({source: from, target: item}));\n        return edges;\n    }\n\n    generateConnectedItems(from, connections) {\n        let edges = [];\n        if (isArray(connections)) {\n            edges = this.generateConnectionsFromArray(from, connections);\n        }\n        if (isObject(connections)) {\n            edges = this.generateConnectionsFromObject(from, connections);\n        }\n        return edges\n    }\n\n    convertToGraph(items) {\n        let graph = {nodes: [], links: []};\n        for (let node in items) {\n            if (items.hasOwnProperty(node)) {\n\n                graph.links = [...graph.links, ...this.generateConnectedItems(node, items[node])];\n                graph.links.forEach((item) => {\n                    if (!graph.nodes.map((item) => item.id).includes(item.source))  {\n                        graph.nodes.push({id: item.source})\n                    }\n                    if (!graph.nodes.map((item) => item.id).includes(item.target))  {\n                        graph.nodes.push({id: item.target})\n                    }\n                });\n            }\n        }\n        graph.links = graph.links.filter((value, index, self) => {\n            return self.slice(index).filter((item) => value.source === item.target && item.source === value.target).length < 1;\n        });\n        return graph;\n    }\n\n    renderGraph() {\n        let data = this.convertToGraph(this.props.graph_json);\n        if (data.nodes.length) {\n            return <Graph id=\"mainGraph\" ref=\"mainGraph\" data={data} config={graph_config}/>\n        }\n        return <p>No data available</p>\n    }\n\n    render() {\n        return (\n            <div className=\"fill-width fill-height standard\">\n                {this.renderGraph()}\n\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport '../css/ErrorBar.css'\nimport '../css/common.css'\n\nexport default class ErrorBar extends React.Component {\n    render() {\n        return (\n            this.props.show && <div className=\"errorContainer top\">{this.props.message}</div>\n        )\n    }\n}","import React from 'react';\nimport '../css/App.css';\nimport DataForm from \"./DataForm\";\nimport JSONGraph from \"./JSONGraph\";\nimport ErrorBar from \"./ErrorBar\";\n\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            json_valid: true,\n            json: {},\n            message: \"The JSON is invalid\"\n        }\n    }\n\n    onChange = (event) => {\n        try {\n            this.setState({json: JSON.parse(event.target.value), json_valid: true});\n        } catch (error) {\n            this.setState({json_valid: false, message:error.message});\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <ErrorBar show={!this.state.json_valid} message={this.state.message}/>\n                <div className=\"App standard full\">\n                    <DataForm onJsonChange={this.onChange}/>\n                    <JSONGraph graph_json={this.state.json} />\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}